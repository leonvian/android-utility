package br.com.lvc.utility.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Locale;

public class ParseUtil {

	private static Locale locale = new Locale("pt", "br");

	public static String firstCharUpperCase(String current){
		String resultFinal = null;;	
		if (current != null && current.length() > 0) {
			String firstChar = current.substring(0,1);
			String anotherString = current.substring(1);
			resultFinal = firstChar.toUpperCase().concat(anotherString);
		} else {
			resultFinal = "";
		}

		return resultFinal;				
	}
	
	public static String toMoney(String valor) {
		NumberFormat nf = new DecimalFormat("###,##0.00");  
		String formatado = nf.format(valor);
		
		return formatado;
	}
	
	public static String toMoney(double valor) {
		NumberFormat nf = new DecimalFormat("###,##0.00");  
		String formatado = nf.format(valor);
		
		return formatado;
	}

	public static String firstCharLowerCase(String current){
		String resultFinal = null;;	

		if (current != null && current.length() > 0) {
			String firstChar = current.substring(0,1);
			String anotherString = current.substring(1);
			resultFinal = firstChar.toLowerCase().concat(anotherString);  
		} else {
			resultFinal = "";
		}
		return resultFinal;				
	}


	public static Long toLong(String value) {
		Long result= null;

		try{
			result = Long.valueOf(value);
		}catch (NumberFormatException e) {
			result = null;
		}


		return result;
	}

	public static Integer toInteger(String value){
		Integer valueInt = null;

		try {			
			if(value != null && value.length() > 0){
				valueInt = Integer.valueOf(value);
			}
		} catch (Exception e) {
			valueInt = null;
		}

		return valueInt;
	}

	public static int toInt(String value){
		int valueInt = 0;

		try {			
			if(value != null && value.length() != 0) {
				valueInt = Integer.valueOf(value);
			}
		} catch (Exception e) {
			valueInt = 0;
		}

		return valueInt;
	}

	public static short toShort(String value){
		short valueShort = 0;

		try{
			if(value.length() != 0){
				valueShort = Short.valueOf(value);
			}
		}catch (Exception e) {
			valueShort = 0;
		} 

		return valueShort;
	}

	public static float toFloat(String value){
		float valueFloat = 0;

		try {			
			if(value.length() != 0){
				valueFloat = Float.valueOf(value);
			}
		} catch (Exception e) {
			valueFloat = 0; 
		}
		return valueFloat;
	}

	public static Double toDouble(String value){
		value = value.replace(',', '.');
		Double valueFloat = 0.0;

		try {			
			if(value.length() != 0){
				valueFloat = Double.valueOf(value);
			}
		} catch (Exception e) {
			e.printStackTrace();
			valueFloat = 0.0; 
		}
		return valueFloat;
	}

	public static String toString(Date date) {		
		String value = "";

		if(date == null)
			return value;


		DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM,locale);			
		value = dateFormat.format(date);


		return value; 
	}
	
	public static String toStringCompleta(Date date) {
		String value = "";

		if(date == null)
			return value;


		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");	
		value = dateFormat.format(date);


		return value; 
	}

	public static Date toDate(String value) {
		if(value == null)
			return null;

		Date date = null;		

		try {						 
			DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM,locale);		
			date = dateFormat.parse(value);			
		} catch ( Exception ex ) {
			ex.printStackTrace();
			date = null;		
		}


		return date;
	}


	public static boolean isIntervalOk(Date dataInicial, Date dataFinal) {
		boolean result = false;

		if(dataInicial != null && dataFinal != null) {
			result = dataInicial.before(dataFinal);
		}

		return result;
	}



	public static String toString(Float valuefloat) {		
		String result = null;
		StringBuilder stringBuilder = new StringBuilder();
		NumberFormat df = NumberFormat.getNumberInstance();
		try {						
			result = df.format(valuefloat);			
			String[] values  = result.split(",");			
			for(String valueString : values) {
				stringBuilder.append(valueString);
			}
		} catch(Exception ex) {
			ex.printStackTrace();
			result = "";
		}

		return result;
	}


	public static String doubleToStringFormat(Double value) {
		String result = null;
		if(value != null) {
			DecimalFormat decimalFormat = new DecimalFormat("#0.##");
			result = decimalFormat.format(value);
		}

		return result;
	}

	public static String doubleToStringMoney(Double value) {
		try {
			DecimalFormat df = new DecimalFormat("#,###.00");
			return "R$ " + df.format(value);
		}catch (Exception e) {
			e.printStackTrace();
			return " ";
		}

	}

	public static String toExtenso(BigDecimal value) {
		if(value == null)
			return "";
		Extenso extenso = new Extenso();
		extenso.setNumber(value);
		return extenso.toString();
	}

	public static String toExtenso(Double value) {
		if(value == null)
			return "";
		
		Extenso extenso = new Extenso();
		extenso.setNumber(value);
		return extenso.toString();
	}


	/** 
	 * Titulo: JExtenso 
	 * <p> 
	 * Descrição: Programa converte um numero para o valor em extenso 
	 * <p> 
	 *  
	 * @author Sérgio Eduardo Rodrigues 
	 * @version 1.0 
	 * @created 10 de Janeiro de 2001 
	 */  
	static class Extenso {  

		private ArrayList nro;    
		private BigInteger num;  

		private String Qualificadores[][] = { { "centavo", "centavos" },  
				{ "", "" }, { "mil", "mil" }, { "milhão", "milhões" },  
				{ "bilhão", "bilhões" }, { "trilhão", "trilhões" },  
				{ "quatrilhão", "quatrilhões" }, { "quintilhão", "quintilhões" },  
				{ "sextilhão", "sextilhões" }, { "septilhão", "septilhões" } };  

		private String Numeros[][] = {  
				{ "zero", "um", "dois", "três", "quatro", "cinco", "seis", "sete",  
					"oito", "nove", "dez", "onze", "doze", "treze", "quatorze",  
					"quinze", "desesseis", "desessete", "dezoito", "desenove" },  
					{ "vinte", "trinta", "quarenta", "cinquenta", "sessenta",  
						"setenta", "oitenta", "noventa" },  
						{ "Cem", "Cento", "Duzentos", "Trezentos", "Quatrocentos",  
							"Quinhentos", "Seiscentos", "Setecentos", "Oitocentos",  
						"Novecentos" } };  


		public Extenso() {  
			nro = new ArrayList();  
			setNumber(0);  
		}  


		public Extenso(BigDecimal dec) {  
			this();  
			setNumber(dec);  
		}  


		public Extenso(double dec) {  
			this();  
			setNumber(dec);  
		}  

		public void setNumber(BigDecimal dec) {  
			num = dec.setScale(2, BigDecimal.ROUND_HALF_UP).multiply(BigDecimal.valueOf(100)).toBigInteger();  
			nro.clear();  
			if (num.equals(BigInteger.ZERO)) {           
				nro.add(new Integer(0)); 
				nro.add(new Integer(0));  
			} else {  
				addRemainder(100);  
				while (!num.equals(BigInteger.ZERO)) {  
					addRemainder(1000);  
				}  
			}  
		}  

		public void setNumber(double dec) {  
			setNumber(new BigDecimal(dec));  
		}  

		public void show() {  
			Iterator valores = nro.iterator();  

			while (valores.hasNext()) {  
				System.out.println(((Integer) valores.next()).intValue());  
			}  
			System.out.println(toString());  
		}  

		public String toString() {  
			StringBuffer buf = new StringBuffer(); 
			int ct;  

			for (ct = nro.size() - 1; ct > 0; ct--) {  

				if (buf.length() > 0 && !ehGrupoZero(ct)) {  
					buf.append(" e ");  
				}  
				buf.append(numToString(((Integer) nro.get(ct)).intValue(), ct));  
			}  
			if (buf.length() > 0) {  
				if (ehUnicoGrupo())  
					buf.append(" de ");  
				while (buf.toString().endsWith(" "))  
					buf.setLength(buf.length() - 1);  
				if (ehPrimeiroGrupoUm())  
					buf.insert(0, "h");  
				if (nro.size() == 2 && ((Integer) nro.get(1)).intValue() == 1) {  
					buf.append(" real");  
				} else {  
					buf.append(" reais");  
				}  
				if (((Integer) nro.get(0)).intValue() != 0) {  
					buf.append(" e ");  
				}  
			}  
			if (((Integer) nro.get(0)).intValue() != 0) {  
				buf.append(numToString(((Integer) nro.get(0)).intValue(), 0));  
			}  
			return buf.toString();  
		}  

		private boolean ehPrimeiroGrupoUm() {  
			if (((Integer) nro.get(nro.size() - 1)).intValue() == 1)  
				return true;  
			return false;  
		}  


		private void addRemainder(int divisor) {        
			BigInteger[] newNum = num.divideAndRemainder(BigInteger.valueOf(divisor));  
			nro.add(new Integer(newNum[1].intValue()));  
			num = newNum[0];  
		}  


		private boolean ehUnicoGrupo() {  
			if (nro.size() <= 3)  
				return false;  
			if (!ehGrupoZero(1) && !ehGrupoZero(2))  
				return false;  
			boolean hasOne = false;  
			for (int i = 3; i < nro.size(); i++) {  
				if (((Integer) nro.get(i)).intValue() != 0) {  
					if (hasOne)  
						return false;  
					hasOne = true;  
				}  
			}  
			return true;  
		}  

		boolean ehGrupoZero(int ps) {  
			if (ps <= 0 || ps >= nro.size())  
				return true;  
			return ((Integer) nro.get(ps)).intValue() == 0;  
		}  

		private String numToString(int numero, int escala) {  
			int unidade = (numero % 10);  
			int dezena = (numero % 100); 

			int centena = (numero / 100);  
			StringBuffer buf = new StringBuffer();  

			if (numero != 0) {  
				if (centena != 0) {  
					if (dezena == 0 && centena == 1) {  
						buf.append(Numeros[2][0] );  
					} else {  
						buf.append(Numeros[2][centena]);  
					}  
				}  

				if ((buf.length() > 0) && (dezena != 0)) {  
					buf.append(" e ");  
				}  
				if (dezena > 19) {  
					dezena /= 10;  
					buf.append(Numeros[1][dezena - 2]);  
					if (unidade != 0) {  
						buf.append(" e ");  
						buf.append(Numeros[0][unidade]);  
					}  
				} else if (centena == 0 || dezena != 0) {  
					buf.append(Numeros[0][dezena]);  
				}  

				buf.append(" ");  
				if (numero == 1) {  
					buf.append(Qualificadores[escala][0] );  
				} else {  
					buf.append(Qualificadores[escala][1] );  
				}  
			}  

			return buf.toString();  
		}  


	}  
}